from jinja2 import Template
import os
import yaml
import argparse
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from openai import OpenAI
from recognition.utils import get_image_list, get_openai_client
from recognition.normal_recognition import RECOGNITION_PROMPT_TEMPLATE

model_name = "gpt-4.1-mini"

# –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_exam_question = "–°–ª–µ–ø–∞—è –ø–æ–¥–ø–∏—Å—å –ß–∞—É–º–∞ –∏ –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ ¬´–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ¬ª –ü—Ä–æ—Ç–æ–∫–æ–ª ¬´–ò–≥—Ä–∞ –≤ –ø–æ–∫–µ—Ä –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ¬ª( –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–∫–µ—Ä)"

# –ü—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
prompts_config_path = "configs/prompts.yaml"


def load_prompts_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤"""
    with open(prompts_config_path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)


def recognize_lecture_notes(images_folder: str, client: OpenAI) -> str:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    Args:
        images_folder: –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
        client: OpenAI –∫–ª–∏–µ–Ω—Ç

    Returns:
        –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
    """
    print(f"üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –∏–∑ –ø–∞–ø–∫–∏: {images_folder}")

    image_list = get_image_list(images_folder, ext=".png")
    if not image_list:
        print(f"‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ {images_folder}")
        return ""

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(image_list)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    messages = [
        {"role": "system", "content": RECOGNITION_PROMPT_TEMPLATE.render()},
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Here is the set of handwritten student lecture notes for the information extracting:",
                },
                *[
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/png;base64,{img_data}"},
                    }
                    for img_data in image_list
                ],
            ],
        },
    ]

    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
    response = client.chat.completions.create(
        model=model_name,
        messages=messages,
        temperature=0.2,
    )

    print("‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")

    answer = response.choices[0].message.content
    if "[END OF REASONING]" in answer:
        print("–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
        answer = answer.split("[END OF REASONING]")[1]

    return answer


def generate_additional_material(
    exam_question: str, client: OpenAI, prompts_config: dict
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª

    Args:
        exam_question: –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        client: OpenAI –∫–ª–∏–µ–Ω—Ç
        prompts_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    """
    print("üìö –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª...")

    generating_content_prompt = prompts_config["generating_content_system_prompt"]

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–æ–º–ø—Ç
    template = Template(generating_content_prompt)
    prompt_content = template.render(exam_question=exam_question)

    messages = [{"role": "system", "content": prompt_content}]

    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞...")
    response = client.chat.completions.create(
        model=model_name,
        messages=messages,
        temperature=0.3,
    )

    print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    return response.choices[0].message.content


def synthesize_material(
    exam_question: str,
    lecture_notes: str,
    additional_material: str,
    client: OpenAI,
    prompts_config: dict,
) -> str:
    """
    –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞

    Args:
        exam_question: –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        lecture_notes: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã
        additional_material: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        client: OpenAI –∫–ª–∏–µ–Ω—Ç
        prompts_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

    Returns:
        –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    """
    print("üîÑ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª...")

    synthesize_prompt = prompts_config["synthesize_system_prompt"]

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    template = Template(synthesize_prompt)
    prompt_content = template.render(
        exam_question=exam_question,
        lecture_notes=lecture_notes,
        additional_material=additional_material,
    )

    messages = [{"role": "system", "content": prompt_content}]

    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    response = client.chat.completions.create(
        model=model_name,
        messages=messages,
        temperature=0.2,
    )

    print("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω")
    return response.choices[0].message.content


def save_markdown(filepath, content):
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(content)


def save_results(
    exam_question: str,
    lecture_notes: str,
    additional_material: str,
    synthesized_material: str,
    output_dir: str = "results",
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π .md —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π (–ì–ì–ì–ì-–ú–ú-–î–î).
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    dated_dir = os.path.join(output_dir, today)
    os.makedirs(dated_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    save_markdown(
        os.path.join(dated_dir, "exam_question.md"),
        "# –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\n" + exam_question.strip(),
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã
    save_markdown(
        os.path.join(dated_dir, "lecture_notes.md"),
        "# –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã\n\n" + lecture_notes.strip(),
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    save_markdown(
        os.path.join(dated_dir, "additional_material.md"),
        "# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n\n" + additional_material.strip(),
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑
    save_markdown(
        os.path.join(dated_dir, "synthesized_material.md"),
        "# –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n\n" + synthesized_material.strip(),
    )
    print(f"üíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {dated_dir}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    parser = argparse.ArgumentParser(description="–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    parser.add_argument(
        "--exam-question", default=default_exam_question, help="–≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
    )
    parser.add_argument(
        "--images-folder",
        default="images/clipped",
        help="–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤",
    )
    parser.add_argument(
        "--output",
        default="data/outputs/synthesized_material.md",
        help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
    )
    parser.add_argument(
        "--skip-recognition",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤",
    )
    parser.add_argument(
        "--skip-generation",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
    )

    args = parser.parse_args()

    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    print(f"üìù –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {args.exam_question}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤
    prompts_config = load_prompts_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    client = get_openai_client()

    # –≠—Ç–∞–ø 1: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
    lecture_notes = ""
    if not args.skip_recognition:
        lecture_notes = recognize_lecture_notes(args.images_folder, client)
    else:
        print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —ç—Ç–∞–ø —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤")
        lecture_notes = "–ö–æ–Ω—Å–ø–µ–∫—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–ª–∏—Å—å (–ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É)"

    # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    additional_material = ""
    if not args.skip_generation:
        additional_material = generate_additional_material(
            args.exam_question, client, prompts_config
        )
    else:
        print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —ç—Ç–∞–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        additional_material = (
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è (–ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É)"
        )

    # –≠—Ç–∞–ø 3: –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    synthesized_material = synthesize_material(
        args.exam_question, lecture_notes, additional_material, client, prompts_config
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_results(
        args.exam_question,
        lecture_notes,
        additional_material,
        synthesized_material,
        args.output,
    )

    print("üéâ –ü—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
