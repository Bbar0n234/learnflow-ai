"""Handlers for authentication-related commands."""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
import telegramify_markdown

from ..database import AuthDatabase
from ..settings import get_settings

logger = logging.getLogger(__name__)

router = Router()
settings = get_settings()

# Initialize auth database
auth_db = AuthDatabase(settings.database_url or "")


@router.message(Command("web_auth"))
async def web_auth_command(message: Message):
    """Generate authentication code for web UI access."""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    if not settings.database_url:
        await message.answer(
            telegramify_markdown.markdownify(
                "‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    try:
        # Make sure database is connected
        if not auth_db.pool:
            await auth_db.connect()
        
        # Generate auth code
        code = await auth_db.create_auth_code(username, user_id)
        
        # Send code to user with instructions
        auth_text = (
            "üîê *–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞*\n\n"
            f"–í–∞—à –∫–æ–¥: `{code}`\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{username}`\n\n"
            "üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å LearnFlow AI\n"
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'\n"
            f"3. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
            f"4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {code}\n\n"
            "‚è± –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.\n"
            "–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."
        )
        
        await message.answer(
            telegramify_markdown.markdownify(auth_text),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        logger.info(f"Generated auth code for user {username} (ID: {user_id})")
        
    except Exception as e:
        logger.error(f"Failed to generate auth code for user {user_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )