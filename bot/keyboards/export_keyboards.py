"""Inline keyboards for export functionality."""

from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def get_export_options_keyboard() -> InlineKeyboardMarkup:
    """Main export menu keyboard."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üì¶ –ü–∞–∫–µ—Ç (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ)",
                callback_data="export:package:final"
            ),
            InlineKeyboardButton(
                text="üì¶ –ü–∞–∫–µ—Ç (–≤—Å–µ)",
                callback_data="export:package:all"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìÑ –û–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç",
                callback_data="export:single"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                callback_data="export:settings"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="export:cancel"
            )
        ]
    ])


def get_format_keyboard() -> InlineKeyboardMarkup:
    """Export format selection keyboard."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìù Markdown",
                callback_data="format:markdown"
            ),
            InlineKeyboardButton(
                text="üìÑ PDF",
                callback_data="format:pdf"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="export:back"
            )
        ]
    ])


def get_document_selection_keyboard(available_files: List[str] = None) -> InlineKeyboardMarkup:
    """Document selection keyboard for single export based on available files."""
    keyboard = []
    
    # Default file display names mapping
    file_display_names = {
        "synthesized_material.md": ("üìù –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "synthesized_material"),
        "questions.md": ("‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è", "questions"),
        "generated_material.md": ("üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "generated_material"),
        "recognized_notes.md": ("‚úèÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏", "recognized_notes"),
    }
    
    # Dynamically add support for answer files (up to 15)
    for i in range(1, 16):
        file_display_names[f"answer_{i}.md"] = (f"üí° –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {i}", f"answer_{i}")
    
    if available_files:
        # Show only available files
        for file_name in available_files:
            if file_name in file_display_names:
                display_text, callback_data = file_display_names[file_name]
                keyboard.append([
                    InlineKeyboardButton(
                        text=display_text,
                        callback_data=f"doc:{callback_data}"
                    )
                ])
    else:
        # Fallback to showing all standard documents if no files list provided
        # (for backward compatibility)
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìù –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                    callback_data="doc:synthesized_material"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è",
                    callback_data="doc:questions"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                    callback_data="doc:generated_material"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏",
                    callback_data="doc:recognized_notes"
                )
            ]
        ]
    
    # Always add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="export:back"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_sessions_keyboard(sessions: List[dict]) -> InlineKeyboardMarkup:
    """Keyboard for session selection from history."""
    keyboard = []
    
    for session in sessions[:5]:
        keyboard.append([
            InlineKeyboardButton(
                text=session['display_name'],
                callback_data=f"session:{session['session_id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="export:cancel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_settings_keyboard(settings: dict) -> InlineKeyboardMarkup:
    """Export settings keyboard."""
    current_format = settings.get('default_format', 'markdown')
    current_package = settings.get('default_package_type', 'final')
    
    format_text = "üìù Markdown" if current_format == 'markdown' else "üìÑ PDF"
    package_text = "–§–∏–Ω–∞–ª—å–Ω—ã–µ" if current_package == 'final' else "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"–§–æ—Ä–º–∞—Ç: {format_text}",
                callback_data="settings:format"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ü–∞–∫–µ—Ç: {package_text}",
                callback_data="settings:package"
            )
        ],
        [
            InlineKeyboardButton(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                callback_data="settings:save"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="settings:cancel"
            )
        ]
    ])


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """Confirmation keyboard for export actions."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞",
                callback_data="confirm:yes"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç",
                callback_data="confirm:no"
            )
        ]
    ])