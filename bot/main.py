"""
Telegram –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
"""

import logging
import asyncio
import aiohttp
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.enums import ChatAction, ParseMode
import telegramify_markdown

from .settings import get_settings


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)



# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


class LearnFlowBot:
    """Telegram –±–æ—Ç –¥–ª—è LearnFlow AI —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, bot: Bot):
        self.settings = get_settings()
        self.api_base_url = f"http://{self.settings.api.learnflow_host}:{self.settings.api.learnflow_port}"
        self.bot = bot


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance: Optional[LearnFlowBot] = None


@router.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    welcome_text = (
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LearnFlow AI!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ —è:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–º –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
        "‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞!"
    )
    
    await message.answer(
        telegramify_markdown.markdownify(welcome_text),
        parse_mode=ParseMode.MARKDOWN_V2
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîß *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/reset - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n\n"
        "üìã *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "3. –û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )
    
    await message.answer(
        telegramify_markdown.markdownify(help_text),
        parse_mode=ParseMode.MARKDOWN_V2
    )


@router.message(Command("reset"))
async def reset_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = message.from_user.id
    thread_id = str(user_id)
    
    try:
        await bot_instance._delete_thread(thread_id)
        logger.info(f"Deleted thread {thread_id} for user {user_id}")
    except Exception as e:
        logger.warning(f"Failed to delete thread {thread_id}: {e}")
    
    await message.answer(
        telegramify_markdown.markdownify("üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."),
        parse_mode=ParseMode.MARKDOWN_V2
    )


@router.message(Command("status"))
async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    thread_id = str(user_id)
    
    try:
        status_info = await bot_instance._get_thread_status(thread_id)
        description = status_info['current_step']['description']
        
        status_text = (
            f"üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:*\n\n"
            f"üìç {description}\n\n"
        )
        
        await message.answer(
            telegramify_markdown.markdownify(status_text),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"Error getting status for user {user_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reset."),
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(F.text)
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    message_text = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await message.bot.send_chat_action(
        chat_id=message.chat.id, 
        action=ChatAction.TYPING
    )
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ thread_id
        thread_id = str(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LearnFlow API
        result = await bot_instance._process_message(thread_id, message_text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        await _handle_api_response(message, result)
        
    except Exception as e:
        logger.error(f"Error processing message from user {user_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."),
            parse_mode=ParseMode.MARKDOWN_V2
        )


async def _handle_api_response(message: Message, result: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
    result_data = result.get("result", [])
    
    if isinstance(result_data, list):
        # HITL –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for msg in result_data:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(msg) > 4000:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                chunks = [msg[i:i+4000] for i in range(0, len(msg), 4000)]
                for chunk in chunks:
                    await message.answer(
                        telegramify_markdown.markdownify(chunk),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
            else:
                await message.answer(
                    telegramify_markdown.markdownify(msg),
                    parse_mode=ParseMode.MARKDOWN_V2
                )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_instance
    
    settings = get_settings()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=settings.telegram.token)
    dp = Dispatcher()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_instance = LearnFlowBot(bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting LearnFlow Telegram Bot...")
    await dp.start_polling(bot)


# –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å LearnFlowBot)
async def _process_message(self, thread_id: str, message: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ LearnFlow API"""
    async with aiohttp.ClientSession() as session:
        payload = {
            "thread_id": thread_id,
            "message": message
        }
        
        async with session.post(
            f"{self.api_base_url}/process",
            json=payload
        ) as response:
            if response.status != 200:
                raise Exception(f"API error: {response.status}")
            
            return await response.json()


async def _get_thread_status(self, thread_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ thread'–∞"""
    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{self.api_base_url}/state/{thread_id}"
        ) as response:
            if response.status != 200:
                raise Exception(f"API error: {response.status}")
            
            return await response.json()


async def _delete_thread(self, thread_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ thread'–∞"""
    async with aiohttp.ClientSession() as session:
        async with session.delete(
            f"{self.api_base_url}/thread/{thread_id}"
        ) as response:
            if response.status != 200:
                raise Exception(f"API error: {response.status}")


# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å LearnFlowBot
LearnFlowBot._process_message = _process_message
LearnFlowBot._get_thread_status = _get_thread_status
LearnFlowBot._delete_thread = _delete_thread


if __name__ == "__main__":
    asyncio.run(main()) 