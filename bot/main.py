"""
Telegram –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.
"""

import logging
import asyncio
import aiohttp
from typing import Dict, Any, Optional
from pathlib import Path

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, PhotoSize
from aiogram.filters import Command, CommandStart
from aiogram.enums import ChatAction, ParseMode
import telegramify_markdown  # type: ignore[import-untyped]

from .settings import get_settings
from .handlers.hitl_settings import router as hitl_router
from .handlers.prompt_config import router as prompt_config_router
from .handlers.export_handlers import router as export_router

# Create logs directory if it doesn't exist
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º –∏ –∫–æ–Ω—Å–æ–ª—å—é
handlers = [
    logging.StreamHandler(),  # Console output
    logging.FileHandler(log_dir / "bot.log", encoding="utf-8")  # File output
]

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=handlers
)
logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


class LearnFlowBot:
    """Telegram –±–æ—Ç –¥–ª—è LearnFlow AI —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, bot: Bot):
        self.settings = get_settings()
        self.api_base_url = f"http://{self.settings.api.host}:{self.settings.api.port}"
        self.bot = bot

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ–¥–∏–∞ (photo + text)
        self.pending_media: Dict[int, Dict[str, Any]] = {}

    async def _process_message(
        self, thread_id: str, message_text: str, image_paths: list[str] = None
    ) -> Dict[str, Any]:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ API"""
        request_data = {
            "message": message_text,
            "thread_id": thread_id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if image_paths:
            request_data["image_paths"] = image_paths
            
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.api_base_url}/process",
                json=request_data,
            ) as response:
                if response.status != 200:
                    raise Exception(f"API error: {response.status}")
                return await response.json()

    async def _download_photo(self, photo: PhotoSize) -> bytes:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API"""
        file = await self.bot.get_file(photo.file_id)
        if not file.file_path:
            raise Exception("File path is None")
        photo_data = await self.bot.download_file(file.file_path)
        if not photo_data:
            raise Exception("Failed to download photo data")
        return photo_data.read()

    async def _upload_images(
        self, thread_id: str, image_data_list: list[bytes]
    ) -> list[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ API"""
        image_paths = []
        async with aiohttp.ClientSession() as session:
            for i, image_data in enumerate(image_data_list):
                data = aiohttp.FormData()
                data.add_field(
                    "file",
                    image_data,
                    filename=f"image_{i}.jpg",
                    content_type="image/jpeg",
                )
                data.add_field("thread_id", thread_id)

                async with session.post(
                    f"{self.api_base_url}/upload_image", data=data
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        image_paths.append(result.get("file_path", ""))
                    else:
                        logger.error(f"Failed to upload image {i}: {response.status}")
        return image_paths

    async def _get_thread_status(self, thread_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ thread'–∞"""
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{self.api_base_url}/state/{thread_id}"
            ) as response:
                if response.status != 200:
                    raise Exception(f"API error: {response.status}")
                return await response.json()

    async def _delete_thread(self, thread_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ thread'–∞"""
        async with aiohttp.ClientSession() as session:
            async with session.delete(
                f"{self.api_base_url}/state/{thread_id}"
            ) as response:
                if response.status != 200:
                    raise Exception(f"API error: {response.status}")
                return await response.json()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance: Optional[LearnFlowBot] = None


@router.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LearnFlow AI!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤.\n\n"
        "üìù –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤–∞—à–∏—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ (—è –ø–æ–º–æ–≥—É –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)\n\n"
        "üîß –Ø —Å–æ–∑–¥–∞–º:\n"
        "‚Ä¢ –û–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
        "üì∏ *–°–æ–≤–µ—Ç:* –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!"
    )

    await message.answer(
        telegramify_markdown.markdownify(welcome_text), parse_mode=ParseMode.MARKDOWN_V2
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîß *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/hitl - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π/—É–ø—Ä–∞–≤–ª—è–µ–º—ã–π)\n"
        "/configure - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n"
        "/reset_prompts - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º\n"
        "/reset - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n\n"
        "üì§ *–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:*\n"
        "/export - –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n"
        "/export_menu - –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
        "/sessions - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π\n"
        "/export_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n"
        "üìã *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n"
        "2. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "4. –û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "6. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ Markdown –∏–ª–∏ PDF\n\n"
        "üì∏ *–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:*\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤\n"
        "‚Ä¢ –§–æ—Ç–æ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë –Ω–∞ —Ñ–æ—Ç–æ\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ß–µ–º —á–µ—Ç—á–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )

    await message.answer(
        telegramify_markdown.markdownify(help_text), parse_mode=ParseMode.MARKDOWN_V2
    )


@router.message(Command("reset"))
async def reset_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    thread_id = str(user_id)

    if not bot_instance:
        return

    try:
        await bot_instance._delete_thread(thread_id)
        # –û—á–∏—â–∞–µ–º pending media –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in bot_instance.pending_media:
            del bot_instance.pending_media[user_id]
        logger.info(f"Deleted thread {thread_id} for user {user_id}")

        await message.answer(
            telegramify_markdown.markdownify(
                "üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    except Exception as e:
        logger.warning(f"Failed to delete thread {thread_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
        )


@router.message(Command("status"))
async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    thread_id = str(user_id)

    if not bot_instance:
        return

    try:
        status_info = await bot_instance._get_thread_status(thread_id)
        description = status_info["current_step"]["description"]

        status_text = f"üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:*\n\nüìç {description}\n\n"

        await message.answer(
            telegramify_markdown.markdownify(status_text),
            parse_mode=ParseMode.MARKDOWN_V2,
        )

    except Exception as e:
        logger.error(f"Error getting status for user {user_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reset."
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
        )


@router.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not message.from_user or not message.bot:
        return
    user_id = message.from_user.id

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.bot.send_chat_action(
            chat_id=message.chat.id, action=ChatAction.UPLOAD_PHOTO
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        if not message.photo:
            return
        photo = message.photo[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–º–µ–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        if not bot_instance:
            return
        photo_data = await bot_instance._download_photo(photo)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pending media –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in bot_instance.pending_media:
            bot_instance.pending_media[user_id] = {
                "photos": [],
                "text": None,
                "timestamp": message.date,
            }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ pending media
        bot_instance.pending_media[user_id]["photos"].append(photo_data)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç
        if message.caption:
            bot_instance.pending_media[user_id]["text"] = message.caption

        photo_count = len(bot_instance.pending_media[user_id]["photos"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            f"üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_count}/10\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
        )

        await message.answer(
            telegramify_markdown.markdownify(confirmation_text),
            parse_mode=ParseMode.MARKDOWN_V2,
        )

    except Exception as e:
        logger.error(f"Error handling photo from user {user_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
        )


@router.message(F.text & ~F.text.startswith("/"))
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not message.from_user or not message.bot:
        return
    user_id = message.from_user.id
    message_text = message.text or ""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ thread_id
        thread_id = str(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pending media –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not bot_instance:
            return
        pending_media = bot_instance.pending_media.get(user_id)

        if pending_media and pending_media["photos"]:
            # –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            logger.info(
                f"Processing message with {len(pending_media['photos'])} images for user {user_id}"
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
            final_text = message_text or pending_media.get("text", "")

            if not final_text:
                await message.answer(
                    telegramify_markdown.markdownify(
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏."
                    ),
                    parse_mode=ParseMode.MARKDOWN_V2,
                )
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ API
            image_paths = await bot_instance._upload_images(
                thread_id, pending_media["photos"]
            )

            if not image_paths:
                await message.answer(
                    telegramify_markdown.markdownify(
                        "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    ),
                    parse_mode=ParseMode.MARKDOWN_V2,
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            result = await bot_instance._process_message(
                thread_id, final_text, image_paths
            )

            # –û—á–∏—â–∞–µ–º pending media
            del bot_instance.pending_media[user_id]
        else:
            # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            logger.info(f"Processing text-only message for user {user_id}")
            result = await bot_instance._process_message(thread_id, message_text)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        await _handle_api_response(message, result)

    except Exception as e:
        logger.error(f"Error processing message from user {user_id}: {e}")
        await message.answer(
            telegramify_markdown.markdownify(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
        )


async def _handle_api_response(message: Message, result: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
    result_data = result.get("result", [])

    if isinstance(result_data, list):
        # HITL –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for msg in result_data:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(msg) > 4000:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                chunks = [msg[i : i + 4000] for i in range(0, len(msg), 4000)]
                for chunk in chunks:
                    await message.answer(
                        telegramify_markdown.markdownify(chunk),
                        parse_mode=ParseMode.MARKDOWN_V2,
                    )
            else:
                await message.answer(
                    telegramify_markdown.markdownify(msg),
                    parse_mode=ParseMode.MARKDOWN_V2,
                )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_instance

    settings = get_settings()

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=settings.telegram.token)
    dp = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_instance = LearnFlowBot(bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(router)
    dp.include_router(hitl_router)
    dp.include_router(prompt_config_router)
    dp.include_router(export_router)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting LearnFlow Telegram Bot with image support...")
    await dp.start_polling(bot)


# –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å LearnFlowBot)


# –ú–µ—Ç–æ–¥—ã —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–ª–∞—Å—Å–µ LearnFlowBot


if __name__ == "__main__":
    asyncio.run(main())
